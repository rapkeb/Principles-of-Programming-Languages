(define last-element
(lambda (lst)
(if (eq? (cdr lst) '())
(car lst)
(last-element (cdr lst)))))

(define power
(lambda (n1 n2)
(if (eq? n2 0)
1
(* n1 (power n1 (- n2 1))))))

(define sum-lst-power
(lambda (lst n)
(if (eq? lst '())
0
(+ (power (car lst) n) (sum-lst-power (cdr lst) n)))))

(define length
(lambda (l)
(if (eq? l '())
0
(+ 1 (length (cdr l))))))  

(define num-from-digits
(lambda (lst)
(if (eq? lst '())
0
(+ (* (car lst) (power 10 (- (length lst) 1))) (num-from-digits (cdr lst))))))

(define is-narcissistic
(lambda (lst)
(if (eq? (num-from-digits lst) (narcissistic lst (length lst)))
#t
#f)))

(define narcissistic
(lambda (lst size)
(if (eq? lst '())
0
(+ (power (car lst) size) (narcissistic (cdr lst) size)))))
 
